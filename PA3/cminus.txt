Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->  Type-specifier ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> ; | [ NUM ] ; 
Fun-declaration-prime ->  ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int ID Param-prime Param-list | void
Param-list -> , Param Param-list | EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [  ] | EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | break ; | ;
Selection-stmt -> if ( Expression ) Statement Else-stmt
Else-stmt -> endif | else Statement endif
Iteration-stmt -> repeat Statement until ( Expression ) 
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | ID B
B -> = Expression | [ Expression ] H | Simple-expression-prime
H -> = Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression | EPSILON
Relop -> < | ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term D | EPSILON
Addop -> + | -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * Factor G | EPSILON
Factor -> ( Expression ) | ID Var-call-prime | NUM
Var-call-prime -> ( Args ) | Var-prime
Var-prime -> [ Expression ] | EPSILON
Factor-prime -> ( Args ) | EPSILON
Factor-zegond -> ( Expression ) | NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | EPSILON
=========================================================
Program →  Declarationlist $
Declarationlist → Declaration Declarationlist
Declarationlist → ε 
Declaration → Declarationinitial Declarationprime
Declarationinitial →  #ptype Typespecifier #pid ID
Declarationprime → #alloc_fun Fundeclarationprime #save_main
Declarationprime → Vardeclarationprime
Vardeclarationprime → #alloc_var_4_byte ; 
Vardeclarationprime →  [ #psize NUM ] #alloc_arr ;
Fundeclarationprime → #inc_scope ( #pzero Params ) #fun_size Compoundstmt #ret
Typespecifier → int  
Typespecifier → void
Params →  #ptype int #pid ID Paramprime #alloc_fun_par  Paramlist 
Params → void
Paramlist → , Param Paramlist
Paramlist → ε
Param → Declarationinitial Paramprime #alloc_fun_par
Paramprime → [  ] 
Paramprime → ε
Compoundstmt → { Declarationlist Statementlist }  #dec_scope
Statementlist → Statement Statementlist
Statementlist → ε
Statement → Expressionstmt 
Statement → Compoundstmt
Statement → Selectionstmt
Statement → Iterationstmt
Statement → Returnstmt
Expressionstmt → Expression ; #pop_exp
Expressionstmt → #break break ;
Expressionstmt → ;
Selectionstmt → if ( Expression ) #save Statement Elsestmt
Elsestmt → #jpf endif 
Elsestmt → else #jpf_save Statement #jp endif
Iterationstmt → #break_j repeat  #label Statement until ( Expression ) #until
Returnstmt → return Returnstmtprime
Returnstmtprime → ;  #ret_void
Returnstmtprime → Expression ; #ret_int
Expression → Simpleexpressionzegond 
Expression → #pid ID B
B → #pidad = Expression #assign 
B → [ Expression #parradd ] H
B → Simpleexpressionprime
H → = Expression #assign  
H → G D C
Simpleexpressionzegond → Additiveexpressionzegond C
Simpleexpressionprime → Additiveexpressionprime C
C → #prelop Relop Additiveexpression #relop 
C → ε
Relop → < 
Relop → ==
Additiveexpression → Term D
Additiveexpressionprime → Termprime D
Additiveexpressionzegond → Termzegond D
D → #pop Addop Term #add/sub D 
D → ε
Addop → + 
Addop → -
Term → Factor G
Termprime → Factorprime G
Termzegond → Factorzegond G
G → * Factor #mult G 
G → ε
Factor →  ( Expression  ) 
Factor → #pid ID Varcallprime
Factor → #pnum NUM
Varcallprime → #padfun ( #pzero Args ) #ret_add
Varcallprime → Varprime
Varprime → [ Expression ] #parradd 
Varprime→ #pidad ε
Factorprime → #padfun ( #pzero Args ) #ret_add
Factorprime → #pidad ε
Factorzegond →  ( Expression ) 
Factorzegond → #pnum NUM
Args → Arglist 
Args → ε #pop_offset
Arglist → Expression #parg Arglistprime
Arglistprime → , Expression #parg Arglistprime 
Arglistprime → ε #pop_offset
