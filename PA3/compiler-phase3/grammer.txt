Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | epsilon
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->  #ptype Type-specifier #pid ID
Declaration-prime -> #declare_fun %return_void %jump_main %dec_scope Fun-declaration-prime  | Var-declaration-prime
Var-declaration-prime -> #declare_var ; | [ #psize NUM #declare_arr ] ;
Fun-declaration-prime -> #inc_scope ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> #ptype int #pid ID Param-prime Param-list | void
Param-list -> , Param Param-list | epsilon
Param -> Declaration-initial Param-prime
Param-prime -> [ #declare_par_arr ] | #declare_par_var epsilon
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | epsilon
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression #pop_expression ; | #breakj break ; | ;
Selection-stmt -> if ( Expression #save ) Statement Else-stmt
Else-stmt -> #jpf endif | else #jpf_save Statement #jp endif
Iteration-stmt -> #jump2 #save_repeat_sym repeat #label Statement until ( Expression #jpf_repeat #fill_break #remove_repeat )
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> #return_void ; | Expression #return_int #return_void ;
Expression -> Simple-expression-zegond | #pid #get_id_addr ID B
B -> = %assign Expression |  [ Expression #get_arr_addr ] H | Simple-expression-prime
H -> = %assign Expression | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop %ex_relop Additive-expression  | epsilon
Relop -> #p_operation < | #p_operation ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #ex_op D | epsilon
Addop -> #p_operation + | #p_operation -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> #p_operation * Factor #ex_op G | epsilon
Factor -> ( Expression ) | #pid ID Var-call-prime | #pnum NUM
Var-call-prime -> #get_id_addr #init_func ( Args #call_fun ) | #get_id_addr Var-prime
Var-prime -> [ Expression #get_arr_addr ] | epsilon
Factor-prime -> #init_func ( Args #call_fun ) | epsilon
Factor-zegond -> ( Expression ) | #pnum NUM
Args -> Arg-list | epsilon
Arg-list -> Expression #pass_arg Arg-list-prime
Arg-list-prime -> , Expression #pass_arg Arg-list-prime | epsilon
